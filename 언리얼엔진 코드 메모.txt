UPROPERTY: 변수 앞에 사용돼 언리얼 엔진 에 보이도록 만들고 해당 변수의 속성을 정의하는 매크로입니다. 
            사용되는 위치나 방식, 또는 변경 가능 여부, 표시 여부와 함께 적절한 위치에 나열되도록 범주를 지정합니다.
UFUNCTION: 함수 앞에서만 사용돼 함수의 속성을 정의하는 매크로입니다.
            사용되는 위치나 방식, 또는 호출 가능 여부와 함께 적절한 위치에 나열되도록 범주를 지정한다.
FORCEINLINE: 

[클래스]
    Actor
        터란 레벨에 배치할 수 있는 오브젝트를 말합니다. 
        액터는 이동, 회전, 스케일과 같은 3D 트랜스폼을 지원하는 범용 클래스입니다. 
        액터는 게임플레이 코드(C++ 또는 블루프린트)를 통해 생성(스폰) 및 소멸 가능합니다. 
        C++ 에서 AActor 는 모든 액터의 베이스 클래스입니다.
        AActor 클래스 인스턴스를 새로 생성하는 것을 Spawn (스폰)이라 합니다. 
        그 방법은 범용 함수 SpawnActor() 나, 그 특수 템플릿 버전을 사용하면 됩니다.
        <UActorComponent>
            베이스 컴포넌트입니다. 
            액터의 일부로 포함 가능합니다. 
            원한다면 Tick 시킬 수 있습니다. 
            액터 컴포넌트는 특정 액터에 연관지어지나, 월드의 특정 지점에 존재하지는 않습니다. 
            일반적으로 개념적 기능, 이를테면 AI 나 플레이어 입력 해석과 같은 것에 사용됩니다.
        <USceneComponent>
            씬 컴포넌트는 트랜스폼이 있는 액터 컴포넌트입니다. 
            트랜스폼은 위치, 회전, 스케일로 정의되는 월드상의 포지션을 나타냅니다. 
            씬 컴포넌트는 계층구조 형태로 서로에게 붙일 수 있습니다. 
            액터의 위치, 회전, 스케일은 계층구조의 루트에 위치한 씬 컴포넌트에서 취할 수 있습니다.
        <UPrimitiveComponent>
            일정한 형태의 (메시 또는 파티클 시스템과 같은) 그래픽적 표현이 있는 씬 컴포넌트를 말합니다. 
            여기에는 재미난 피직스 및 콜리전 세팅이 들어있습니다.
        액터는 씬 컴포넌트 계층구조를 갖는 것을 지원합니다. 
        각 액터 에는 어느 컴포넌트가 액터 의 루트 역할을 할 것인지 나타내는 RootComponent 프로퍼티도 있습니다. 
        액터 자체는 트랜스폼 정보가 없기에 위치, 회전, 스케일이 없습니다. 
        대신, 그 컴포넌트, 좀 더 구체적으로 루트 컴포넌트의 트랜스폼에 의존합니다. 
        이 컴포넌트가 씬 컴포넌트 인 경우, 액터 에 대한 트랜스폼 정보를 제공해 줍니다. 
        아닌 경우, 액터 에는 트랜스폼 정보가 없습니다. 
        부착된 다른 컴포넌트에는, 부착된 그 컴포넌트를 기준으로 한 트랜스폼 정보가 있습니다.
        <Destroy()>
            액터는 Destroy() 를 호출하여 명시적으로 소멸시킬 수 있습니다.
            그러면 레벨에서 제거되어 pending kill (킬 대기) 상태로 마킹, 잠시 후 다음 가비지 컬렉션 때 지워진다는 뜻입니다.
    Pawn : public Actor
        클래스는 플레이어나 AI 가 제어할 수 있는 모든 액터의 베이스 클래스입니다.
        기본적으로 Controller 와 Pawn 에는 1:1 대응 관계가 있습니다. 
        즉 각 컨트롤러는 어느 때고 단 하나의 폰만을 제어합니다. 
        마찬가지로 게임플레이 도중 스폰된 폰이 자동적으로 컨트롤러에 빙의(possess)되지는 않습니다.
    Character : : public Pawn
        CharacterMovementComponent, CapsuleComponent,SkeletalMeshComponent 의 추가를 통해 
        Pawn 클래스는 고도로 특화된 Character (캐릭터) 클래스로 확장됩니다. 
        캐릭터는 월드에서 걷기, 달리기, 점프, 비행, 수영 등이 가능한 직립 플레이어를 표현하기 위해 디자인된 것입니다. 
        이 클래스에는 기본적인 네트워킹이나 인풋 모델 구현도 추가되어 있습니다.
        <SkeletalMeshComponent>
            폰과 달리 캐릭터에는 스켈레톤을 사용하는 고급 애니메이션을 위한 SkeletalMeshComponent 가 딸려옵니다. 
        <CapsuleComponent>
            CapsuleComponent 는 운동 콜리전에 사용됩니다. CharacterMovementComponent 에 대한 복잡한 지오메트리 계산을 위해, 
            Character 클래스의 콜리전 컴포넌트는 직립된 캡슐 모양이라는 가정을 합니다.
        <CharacterMovementComponent>
            CharacterMovementComponent 는 아바타가 걷기, 달리기, 점프, 낙하, 수영 등으로 이동할 때 리짓 바디 피직스를 사용하지 않도록 할 수 있습니다.
            이것은 캐릭터에 국한된 것으로, 다른 클래스에서 구현할 수 없습니다.
            CharacterMovementComponent 에 설정할 수 있는 프로퍼티에는 낙하와 걷기의 마찰력, 공기와 물과 땅을 가로지르는 
            이동 속력, 부력, 중력 스케일, 캐릭터가 피직스 오브젝트에 행사할 수 있는 물리력 등에 대한 값이 포함됩니다. 
            CharacterMovementComponent 는 애니메이션으로부터 오는 루트 모션 파라미터도 포함하며, 
            피직스로 사용할 수 있도록 이미 월드 스페이스에서 트랜스폼 됩니다. 
    Controller 
        Pawn (폰) 또는 Character (캐릭터)처럼 폰에서 파생된 클래스를 빙의(possess)하여 그 동작을 제어할 수 있는, 눈에 보이지는 않는 액터입니다.
        컨트롤러는 Possess 함수로 폰의 제어권을 획득하며, Unpossess 함수로 해제합니다.
    CameraComponent
        메라의 모드를 원근 또는 직교로 할 것인지 설정 가능합니다. 
        원근 모드에 대해서는 세로 시야(FOV)를 설정할 수 있으며, 직교 모드에 대해서는 월드 유닛 단위로 폭을 설정할 수 있습니다. 

[자료구조]
    FString
    TArray
    TMap
    TSet
    TList
    TQueue

[Components 계층]
    (주의점: 기본적으로 컴포넌트->SetupAttachment(RootComponent)를 해주어야 SetRelativeLocation가 정상적으로 작동합니다.)
    루트: RootComponent
    루트컴포넌트로 만들기: RootComponent = 컴포넌트;
    컴포넌트에 붙이기: 컴포넌트->SetupAttachment(RootComponent)

[인스턴싱]
    Actor: 클래스* SpawnedActor1 = (클래스*) GetWorld()->SpawnActor(클래스::StaticClass(), NAME_None, &Location);
        Actor 의 새 인스턴스를 생성하는 과정을 스폰 (spawn)이라 합니다. 
        Actor 의 스폰은 UWorld::SpawnActor() 함수를 이용합니다. 
        이 함수는 지정된 클래스의 새 인스턴스를 생성한 다음 새로 생성된 Actor 로의 포인터를 반환합니다. 
        UWorld::SpawnActor() 는 클래스 계층구조 내 Actor 클래스를 상속하는 클래스 인스턴스를 생성할 때만 사용해야 합니다.

[함수]
    SetRelativeLocation: 